---
layout:     post
title:      "架构研究"
subtitle:   " \"技术研究\""
# date:       2018-06-07 12:00:00
author:     "Ade"
header-img: "img/zujian.jpg"
catalog: true
featured-condition-size: 2
tags:
    - 技术
---

> “Yeah It's on. ”


## 背景

今天参与面试了一个前端，虽然我前端有点水，但是问一些通用问题还是ok的。
问到了项目中使用的架构，面试人员说用的是mvvm,但是说的的很含糊，可能虽然是项目开发人员，但是参与设计架构比较少，对架构也没有太多深入了解。
进入正题。

<p id = "build"></p>
---

## MVC

MVC架构，对于程序员来说特别常见，我最开始学习写代码的时候第一个了解的架构。
* Model：数据及业务模型，负责处理和存取数据。
* View：界面，负责显示数据和与用户交互。
* Controller：处理中心，用来管理Model和View, Model和View都是控制器里的对象，主要负责将数据模型展示在视图上，同时也可负责界面交互的处理。
* Model和View是不相通的，所有的事情只能通过控制器进行交换。
* 这种架构的优点在我看来，阅读代码简单，不管小白还是大牛写起来都能写。但是缺点也很明显，由于优点是谁来都能快速上手，每个开发人员代码水平参差不齐，导致代码里面各种代码风格，各种耦合无法避免，导致vc臃肿不堪。
* 另外好多人提到MVC就说耦合和臃肿，我持不同意见，我认为只要有良好的类的封装和规范的调用，绝对比其他框架开发效率更高。


## MVVM-C

再说MVVM架构，这种架构是MVC的非直接变形的App设计模式。与MVC相比其实并没啥特别大的不同，所使用的机制也都差不多，最大的区别在于VM中对响应式变成的使用。
另外model对象属于VM不属于vc。使用MVVM最大的优点是降低耦合以及规范代码不让vc变的臃肿。

## MVP
MVP其实是介于MVC和MVVM两者间的实现，使用单独的presenter对象去处理业务逻辑和View交互。



## 结束

欢迎交流。

—— Ade 


